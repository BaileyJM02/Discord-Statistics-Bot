package apiHandler

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/BaileyJM02/Hue/pkg/logger"
	"github.com/bwmarrin/discordgo"
)

type MessageAttachment struct {
	_ID      string `json:"_id"`
	URL      string `json:"url"`
	ProxyURL string `json:"proxyurl"`
	Filename string `json:"filename"`
}

type User struct {
	_ID           string `json:"_id"`           // The ID of the user.
	Username      string `json:"username"`      // The user's username.
	Avatar        string `json:"avatar"`        // The hash of the user's avatar. Use Session.UserAvatar to retrieve the avatar itself.
	Locale        string `json:"locale"`        // The user's chosen language option.
	Discriminator string `json:"discriminator"` // The discriminator of the user (4 numbers after name).
	Verified      bool   `json:"verified"`      // Whether the user's email is verified.
	Bot           bool   `json:"bot"`           // Whether the user is a bot.
}

type Message struct {
	_ID             string                `json:"_id"` // The ID of the message.
	CreatedTime     time.Time             `json:"createdtime"`
	ChannelID       string                `json:"channelid"`       // The ID of the channel in which the message was sent.
	GuildID         string                `json:"guildid"`         // The ID of the guild in which the message was sent.
	MentionRoles    []string              `json:"mentionroles"`    // The roles mentioned in the message.
	Tts             bool                  `json:"tts"`             // Whether the message is text-to-speech.
	MentionEveryone bool                  `json:"mentioneveryone"` // Whether the message mentions everyone.
	AuthorID        string                `json:"authorid"`        // The id of the author of the message.
	Attachments     []MessageAttachment   `json:"attachments"`     // A list of attachments present in the message.
	Mentions        []string              `json:"mentions"`        // A list of users mentioned in the message.
	Type            discordgo.MessageType `json:"type"`            // The type of the message.
	WebhookID       string                `json:"webhookid"`       // The webhook ID of the message, if it was generated by a webhook
}

type Member struct {
	_ID             string    `json:"_id"`             //User.ID
	GuildID         string    `json:"guildid"`         // The guild ID on which the member exists.
	JoinedAt        time.Time `json:"joinedat"`        // The time at which the member joined the guild
	Nick            string    `json:"nick"`            // The nickname of the member, if they have one.
	User            User      `json:"user"`            // The underlying user on which the member is based.
	Roles           []string  `json:"roles"`           // A list of IDs of the roles which are possessed by the member.
	MessagesSent    int       `json:"messagessent"`    // Number of messages the user has sent
	AttachmentsSent int       `json:"attachmentssent"` // Number of attachments the user has sent
	LinksSent       int       `json:"linkssent"`       // Number of messages the user has sent
	TimesMentioned  int       `json:"timesmentioned"`  // Number of times a user, other than self mentioned them
}

type MessageHelper struct {
	Message *discordgo.MessageCreate
	Member  *discordgo.Member
}

type CheckHelper struct {
	Guild   *discordgo.Guild
	Members []*discordgo.Member
}

type GuildStats struct {
	_ID           string `json:"_id"`           // Guild ID
	TotalMessages int    `json:"totalmessages"` // Messages all time
	MessagesTMO   int    `json:"messagestmo"`   // Messages this month (last 30 days)
	MessagesTD    int    `json:"messagestd"`    // Messages this day (last 24h)
	MessagesTH    int    `json:"messagesth"`    // Messages this hour (last 60 minutes)
	MessagesTm    int    `json:"messagestm"`    // Messages this minute (last 60 seconds)

	TotalMembers int `json:"totalmembers"` // Members all time
	MembersTMO   int `json:"memberstmo"`   // Members this month (last 30 days)
	MembersTD    int `json:"memberstd"`    // Members this day (last 24h)
	MembersTH    int `json:"membersth"`    // Members this hour (last 60 minutes)
	MembersTm    int `json:"memberstm"`    // Members this minute (last 60 seconds)

	AttachmentsSent int `json:"attachmentssent"` // Number of attachments sent
	LinksSent       int `json:"linkssent"`       // Number of links sent
	Mentions        int `json:"mentions"`        // Number of mentions made
}
type Guild struct {
	_ID      string            `json:"_id"` // Guild ID
	Settings map[string]string `json:"settings"`
}

type GlobalStats struct {
	Members     int
	Messages    int
	Mentions    int
	Links       int
	Attachments int
	Guilds      int
}

func MsgAT(id string) int { // Messages all time
	var messages []Message
	response, err := http.Get(fmt.Sprintf("http://localhost:8000/db/guild/%v/messages/alltime", id))
	if err != nil {
		logger.Error(fmt.Sprintf("The HTTP request failed with error %s\n", err))
	} else {
		json.NewDecoder(response.Body).Decode(&messages)
	}
	return len(messages)
}
func MsgTM(id string) int { // Messages all time
	var messages []Message
	response, err := http.Get(fmt.Sprintf("http://localhost:8000/db/guild/%v/messages/thismonth", id))
	if err != nil {
		logger.Error(fmt.Sprintf("The HTTP request failed with error %s\n", err))
	} else {
		json.NewDecoder(response.Body).Decode(&messages)
	}
	return len(messages)
}
func MsgTD(id string) int { // Messages all time
	var messages []Message
	response, err := http.Get(fmt.Sprintf("http://localhost:8000/db/guild/%v/messages/thisday", id))
	if err != nil {
		logger.Error(fmt.Sprintf("The HTTP request failed with error %s\n", err))
	} else {
		json.NewDecoder(response.Body).Decode(&messages)
	}
	return len(messages)
}
func MsgTH(id string) int { // Messages all time
	var messages []Message
	response, err := http.Get(fmt.Sprintf("http://localhost:8000/db/guild/%v/messages/thishour", id))
	if err != nil {
		logger.Error(fmt.Sprintf("The HTTP request failed with error %s\n", err))
	} else {
		json.NewDecoder(response.Body).Decode(&messages)
	}
	return len(messages)
}
func MsgTm(id string) int { // Messages all time
	var messages []Message
	response, err := http.Get(fmt.Sprintf("http://localhost:8000/db/guild/%v/messages/thisminute", id))
	if err != nil {
		logger.Error(fmt.Sprintf("The HTTP request failed with error %s\n", err))
	} else {
		json.NewDecoder(response.Body).Decode(&messages)
	}
	return len(messages)
}

func MemTM(id string) int { // Members this month (last 30 days)
	var members []Member
	response, err := http.Get(fmt.Sprintf("http://localhost:8000/db/guild/%v/members/thismonth", id))
	if err != nil {
		logger.Error(fmt.Sprintf("The HTTP request failed with error %s\n", err))
	} else {
		json.NewDecoder(response.Body).Decode(&members)
	}
	return len(members)
}
func MemTD(id string) int { // Members this month (last 30 days)
	var members []Member
	response, err := http.Get(fmt.Sprintf("http://localhost:8000/db/guild/%v/members/thisday", id))
	if err != nil {
		logger.Error(fmt.Sprintf("The HTTP request failed with error %s\n", err))
	} else {
		json.NewDecoder(response.Body).Decode(&members)
	}
	return len(members)
}
func MemTH(id string) int { // Members this month (last 30 days)
	var members []Member
	response, err := http.Get(fmt.Sprintf("http://localhost:8000/db/guild/%v/members/thishour", id))
	if err != nil {
		logger.Error(fmt.Sprintf("The HTTP request failed with error %s\n", err))
	} else {
		json.NewDecoder(response.Body).Decode(&members)
	}
	return len(members)
}
func MemTm(id string) int { // Members this month (last 30 days)
	var members []Member
	response, err := http.Get(fmt.Sprintf("http://localhost:8000/db/guild/%v/members/thisminute", id))
	if err != nil {
		logger.Error(fmt.Sprintf("The HTTP request failed with error %s\n", err))
	} else {
		json.NewDecoder(response.Body).Decode(&members)
	}
	return len(members)
}
