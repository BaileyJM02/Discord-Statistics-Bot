package apiHandler

import (
	"time"

	"github.com/bwmarrin/discordgo"
)

type MessageAttachment struct {
	ID       string `storm:"index"`
	URL      string
	ProxyURL string
	Filename string
}

type User struct {
	ID            string `storm:"index"` // The ID of the user.
	Username      string // The user's username.
	Avatar        string // The hash of the user's avatar. Use Session.UserAvatar to retrieve the avatar itself.
	Locale        string // The user's chosen language option.
	Discriminator string // The discriminator of the user (4 numbers after name).
	Verified      bool   // Whether the user's email is verified.
	MFAEnabled    bool   // Whether the user has multi-factor authentication enabled.
	Bot           bool   // Whether the user is a bot.
}

type MentionUser struct {
	ID string `storm:"index"` // The ID of the user.
}

type Message struct {
	CreatedTime     time.Time             `storm:"inline"`
	ID              string                `storm:"unique, index"` // The ID of the message.
	ChannelID       string                // The ID of the channel in which the message was sent.
	GuildID         string                // The ID of the guild in which the message was sent.
	MentionRoles    []string              // The roles mentioned in the message.
	Tts             bool                  // Whether the message is text-to-speech.
	MentionEveryone bool                  // Whether the message mentions everyone.
	AuthorID        string                // The id of the author of the message.
	Attachments     []MessageAttachment   `storm:"inline"` // A list of attachments present in the message.
	Mentions        []string              // A list of users mentioned in the message.
	Type            discordgo.MessageType `storm:"inline"` // The type of the message.
	WebhookID       string                // The webhook ID of the message, if it was generated by a webhook
}

type Member struct {
	GuildID         string    // The guild ID on which the member exists.
	JoinedAt        time.Time `storm:"inline"` // The time at which the member joined the guild
	Nick            string    // The nickname of the member, if they have one.
	User            *User     `storm:"inline"` // The underlying user on which the member is based.
	Roles           []string  // A list of IDs of the roles which are possessed by the member.
	MessagesSent    int       // Number of messages the user has sent
	AttachmentsSent int       // Number of attachments the user has sent
	LinksSent       int       // Number of messages the user has sent

}
type GuildData struct {
	DataMessages map[string]Message `storm:"inline"`
	Members      map[string]Member  `storm:"inline"`
}
type GuildStats struct {
	TotalMessages int // Messages all time
	MessagesTD    int // Messages this day (last 24h)
	MessagesTM    int // Messages this month (last 30 days)
	MessagesTH    int // Messages this hour (last 60 minutes)
	MessagesTm    int // Messages this minute (last 60 seconds)

	TotalMembers int // Members all time
	MembersTD    int // Members this day (last 24h)
	MembersTM    int // Members this month (last 30 days)
	MembersTH    int // Members this hour (last 60 minutes)
	MembersTm    int // Members this minute (last 60 seconds)
}
type Guild struct {
	ID    string     `storm:"unique"` // Guild ID
	Data  GuildData  `storm:"inline"`
	Stats GuildStats `storm:"inline"`
}

func MsgAT(g *Guild) int { // Messages all time
	var total int
	total = len(g.Data.DataMessages)
	return total
}
func MsgTM(g *Guild) int { // Messages this month (last 30 days)
	var total int
	now := time.Now()
	for _, v := range g.Data.DataMessages {
		cutoff := v.CreatedTime.Add(time.Duration(720 * time.Hour))
		if now.Before(cutoff) {
			total++
		}
	}
	return total
}
func MsgTD(g *Guild) int { // Messages this day (last 24 hours)
	var total int
	now := time.Now()
	for _, v := range g.Data.DataMessages {
		cutoff := v.CreatedTime.Add(time.Duration(24 * time.Hour))
		if now.Before(cutoff) {
			total++
		}
	}
	return total
}
func MsgTH(g *Guild) int { // Messages this hour
	var total int
	now := time.Now()
	for _, v := range g.Data.DataMessages {
		cutoff := v.CreatedTime.Add(time.Duration(1 * time.Hour))
		if now.Before(cutoff) {
			total++
		}
	}
	return total
}
func MsgTm(g *Guild) int { // Messages this minute
	var total int
	now := time.Now()
	for _, v := range g.Data.DataMessages {
		cutoff := v.CreatedTime.Add(time.Duration(1 * time.Minute))
		if now.Before(cutoff) {
			total++
		}
	}
	return total
}

func MemTM(g *Guild) int { // Members this month (last 30 days)
	var total int
	now := time.Now()
	for _, v := range g.Data.Members {
		cutoff := v.JoinedAt.Add(time.Duration(720 * time.Hour))
		if now.Before(cutoff) {
			total++
		}
	}
	return total
}
func MemTD(g *Guild) int { // Members this day (last 24 hours)
	var total int
	now := time.Now()
	for _, v := range g.Data.Members {
		cutoff := v.JoinedAt.Add(time.Duration(24 * time.Hour))
		if now.Before(cutoff) {
			total++
		}
	}
	return total
}
func MemTH(g *Guild) int { // Members this hour
	var total int
	now := time.Now()
	for _, v := range g.Data.Members {
		cutoff := v.JoinedAt.Add(time.Duration(1 * time.Hour))
		if now.Before(cutoff) {
			total++
		}
	}
	return total
}
func MemTm(g *Guild) int { // Members this minute
	var total int
	now := time.Now()
	for _, v := range g.Data.Members {
		cutoff := v.JoinedAt.Add(time.Duration(1 * time.Minute))
		if now.Before(cutoff) {
			total++
		}
	}
	return total
}
